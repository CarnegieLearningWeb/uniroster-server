#!/usr/bin/env node

var app = require('../uniroster-server');
var config = require("../config.js");
var debug = require('debug')('uniroster:server');

if (config.httpActive == true) {
  var http = require('http');
  var httpServer = http.createServer(app);
  httpServer.listen(config.httpPort);
  httpServer.on('error', onError);
  httpServer.on('listening', onListening);
}

if (config.httpsActive == true) {
  var https = require('https');
  var fs = require('fs');
  var privateKey = fs.readFileSync(config.httpsPrivateKey, 'utf8');
  var certificate = fs.readFileSync(config.httpsCert, 'utf8');
  var credentials = {key: privateKey, cert: certificate};

  var httpsServer = https.createServer(credentials, app);
  httpsServer.listen(config.httpsPort);
  httpsServer.on('error', onError);
  httpsServer.on('listening', onListeningSecure);
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('HTTP listening on ' + bind);
}

function onListeningSecure() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('HTTPS listening on ' + bind);
}
